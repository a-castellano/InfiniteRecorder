#!/bin/bash -
#===============================================================================
#
#          FILE: windmaker-infiniterecorder
#
#         USAGE: It runs  a service called windmaker-infiniterecorder
#
#   DESCRIPTION:
#
#       OPTIONS: ---
#  REQUIREMENTS: ---
#          BUGS: ---
#         NOTES: ---
#        AUTHOR: Álvaro Castellano Vela (alvaro.castellano.vela@gmail.com),
#       CREATED: 25/06/2022 01:48
#      REVISION:  ---
#===============================================================================

source lib/01-log.sh
source lib/02-variable-management.sh
source lib/03-file-management.sh
source lib/04-ffmpeg.sh
source lib/05-threads.sh

###################
###     Main    ###
###################

SCRIPT_NAME="InfiniteRecorder"

# Check config file

if [ ! -f /etc/default/windmaker-infiniterecorder ]; then
	write_log "/etc/default/windmaker-infiniterecorder does not exist, aborting script."
	exit 1
else
	source /etc/default/windmaker-infiniterecorder
fi

# Check Variables
declare -a required_variables
required_variables=(
	'video-length'
	'owner-user'
	'recording-folder'
	'webcam-instances'
	'webcam-instances-info'
)

abort_script=false

# Check Required variables

for var in ${required_variables[@]}; do
	variable=$(echo ${var} | tr '[:lower:]' '[:upper:]' | tr '-' '_')
	check_required_variable ${variable}
	defined_variable=$?
	if [[ "X${defined_variable}X" == "X0X" ]]; then
		abort_script=true
	fi
done

if [[ "${abort_script}" = true ]]; then
	write_log "Aborting execucion"
	exit 1
fi

# Check webcam info

for webcam_instance in ${WEBCAM_INSTANCES[@]}; do
	check_webcam_info ${webcam_instance}
	valid_webcam_info=$?
	if [[ "X${valid_webcam_info}X" == "X0X" ]]; then
		abort_script=true
	fi
done

if [[ "${abort_script}" = true ]]; then
	write_log "Aborting execucion"
	exit 1
fi

# Prepare recording
create_recording_folders
folders_created=$?
if [[ "X${folders_created}X" == "X0X" ]]; then
	write_log "Cannot create required folders as user ${OWNER_USER}"
	exit 1
fi

# Take snapshot test

take_snapshots
snapshot_created=$?
if [[ "X${snapshot_created}X" == "X0X" ]]; then
	write_log "Aborting."
	exit 1
fi

# Record Videos

for webcam_instance in ${WEBCAM_INSTANCES[@]}; do
	write_log "Lauching record video thread for ${webcam_instance}"
	record_video "${WEBCAM_INSTANCES_INFO[${webcam_instance}_RTSP_URL]}" "${WEBCAM_INSTANCES_INFO[${webcam_instance}_FOLDER]}" "${WEBCAM_INSTANCES_INFO[${webcam_instance}_FOLDER]}_reduced" "${webcam_instance}" "${WEBCAM_INSTANCES_INFO[${webcam_instance}_FFMPEG_OPTIONS]}" &
	>/dev/null 2>/dev/null
	WEBCAM_INSTANCES_INFO[${webcam_instance}_THREAD]=$!
	write_log "${webcam_instance} thread id is ${WEBCAM_INSTANCES_INFO[${webcam_instance}_THREAD]}"

done

# Check if ffmpeg instances are still running
while [ true ]; do

	# For each webcam, check if videos are being generated
	for webcam_instance in ${WEBCAM_INSTANCES[@]}; do
		# Check reduced videos after waiting one minute
		sleep 60
		created_raw_videos=$(find "${WEBCAM_INSTANCES_INFO[${webcam_instance}_FOLDER]}" -type f -cmin -1 | wc -l)
		if [[ "X${created_raw_videos}X" == "X0X" ]]; then
			write_log "No videos in ${WEBCAM_INSTANCES_INFO[${webcam_instance}_FOLDER]} during last minute."
			kill_threads
		else
			# Check reduced videos after waiting one minute
			sleep 60
			created_raw_reduced_videos=$(find "${WEBCAM_INSTANCES_INFO[${webcam_instance}_FOLDER]}_reduced" -type f -cmin -1 | wc -l)
			if [[ "X${created_raw_videos}X" == "X0X" ]]; then
				write_log "No videos in ${WEBCAM_INSTANCES_INFO[${webcam_instance}_FOLDER]}_reduced during last minute."
				kill_threads
			fi
		fi

	done

	sleep 60

	for webcam_instance in ${WEBCAM_INSTANCES[@]}; do
		write_log "Checking if ${webcam_instance} ffmpeg recording is still running"
		ffmpeg_instances=$(ps -aux | grep -v "su - ${OWNER_USER}" | grep ffmpeg | grep "${WEBCAM_INSTANCES_INFO[${webcam_instance}_FOLDER]}" | grep -v grep | wc -l)
		if [[ "X${ffmpeg_instances}X" == "X0X" ]]; then
			write_log "ffmpeg ${webcam_instance} instance is not running, launching again."
			record_video "${WEBCAM_INSTANCES_INFO[${webcam_instance}_RTSP_URL]}" "${WEBCAM_INSTANCES_INFO[${webcam_instance}_FOLDER]}" "${WEBCAM_INSTANCES_INFO[${webcam_instance}_FOLDER]}_reduced" "${webcam_instance}" "${WEBCAM_INSTANCES_INFO[${webcam_instance}_FFMPEG_OPTIONS]}" &
			>/dev/null 2>/dev/null
		fi

		sleep 60
	done

	sleep 120
done

write_log "End"
###record_video
